//SPDX-License-Identifier:MIT

pragma solidity ^0.8.18;

import {Test,console} from 'forge-std/Test.sol';
import {DeployEther} from '../script/DeployEther.s.sol';
import {EtherNft} from '../src/etherNft.sol';
import {HelperConfig} from '../script/HelperConfig.s.sol';

contract BitcoinTest is Test{
    DeployEther public deployer;
    EtherNft public ethereum;
    HelperConfig public helperConfig;
    address public USER = makeAddr('user');

    string public constant priceBeforeURI = "data:application/json;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48IS0tIFVwbG9hZGVkIHRvOiBTVkcgUmVwbywgd3d3LnN2Z3JlcG8uY29tLCBHZW5lcmF0b3I6IFNWRyBSZXBvIE1peGVyIFRvb2xzIC0tPg0KPHN2ZyB3aWR0aD0iODAwcHgiIGhlaWdodD0iODAwcHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4NCjxwYXRoIGQ9Ik0xMCA2SDE1QzE2LjY1NjkgNiAxOCA3LjM0MzE1IDE4IDlDMTggMTAuNjU2OSAxNi42NTY5IDEyIDE1IDEyTTEwIDZWMTJNMTAgNkg3TTEwIDZWM00xNSAxMkgxME0xNSAxMkMxNi42NTY5IDEyIDE4IDEzLjM0MzEgMTggMTVDMTggMTYuNjU2OSAxNi42NTY5IDE4IDE1IDE4SDEwTTEwIDEyVjE4TTEwIDE4SDdNMTAgMThWMjFNMTMgNlYzTTEzIDIxVjE4IiBzdHJva2U9IiMwMDAwMDAiIHN0cm9rZS13aWR0aD0iMiIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIi8+DQo8L3N2Zz4=";
    string public constant priceAfterURI = "data:application/json;base64,PD94bWwgdmVyc2lvbj0iMS4wIiA/PgoNPCFET0NUWVBFIHN2ZyAgUFVCTElDICctLy9XM0MvL0RURCBTVkcgMS4xLy9FTicgICdodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQnPgoNPCEtLSBVcGxvYWRlZCB0bzogU1ZHIFJlcG8sIHd3dy5zdmdyZXBvLmNvbSwgR2VuZXJhdG9yOiBTVkcgUmVwbyBNaXhlciBUb29scyAtLT4KPHN2ZyB3aWR0aD0iODAwcHgiIGhlaWdodD0iODAwcHgiIHZpZXdCb3g9IjAgMCAzMiAzMiIgaWQ9Il94M0NfTGF5ZXJfeDNFXyIgdmVyc2lvbj0iMS4xIiB4bWw6c3BhY2U9InByZXNlcnZlIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIj4KDTxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQo8IVtDREFUQVsNCgkuc3Qwe2ZpbGw6I0UzRjJGRDt9DQoJLnN0MXtmaWxsOiM4MEQ4RkY7fQ0KCS5zdDJ7ZmlsbDojMUFEMkE0O30NCgkuc3Qze2ZpbGw6I0VDRUZGMTt9DQoJLnN0NHtmaWxsOiM1NUZCOUI7fQ0KCS5zdDV7ZmlsbDojQkJERUZCO30NCgkuc3Q2e2ZpbGw6I0MxQUVFMTt9DQoJLnN0N3tmaWxsOiNGRjUyNTI7fQ0KCS5zdDh7ZmlsbDojRkY4QTgwO30NCgkuc3Q5e2ZpbGw6I0ZGQjc0RDt9DQoJLnN0MTB7ZmlsbDojRkZGMTc2O30NCgkuc3QxMXtmaWxsOiNGRkZGRkY7fQ0KCS5zdDEye2ZpbGw6IzY1QzdFQTt9DQoJLnN0MTN7ZmlsbDojQ0ZEOERDO30NCgkuc3QxNHtmaWxsOiMzNzQ3NEY7fQ0KCS5zdDE1e2ZpbGw6Izc4OTA5Qzt9DQoJLnN0MTZ7ZmlsbDojNDJBNUY1O30NCgkuc3QxN3tmaWxsOiM0NTVBNjQ7fQ0KXV0+DQo8L3N0eWxlPgoNPGcgaWQ9IkJpdGNvaW5feDJDX19CVENfMV8iPgoNPHBhdGggY2xhc3M9InN0OSIgZD0iTTcuNDgsOC43NWMwLjAzLTAuMDQtMS45NCwwLTEuOTQsMFY1Ljg5YzAsMCw0LjgxLDAuMDEsNS4zOSwwbDAuMDEtNC4zOWgyLjY3TDEzLjYsNS44MSAgIGMwLjcyLTAuMDIsMS40NC0wLjAzLDIuMTQtMC4wM1YxLjVsMi42OCwwLjAxTDE4LjQxLDUuOWMzLjQ1LDAuMyw2LjE5LDEuMzcsNi40OSw0LjUzYzAuMjIsMi4zMi0wLjc1LDMuNzEtMi4zLDQuNSAgIGMyLjU1LDAuNjEsNC4xNSwyLjEzLDMuODMsNS41M2MtMC4zOSw0LjIyLTMuNTQsNS4zNS04LjAzLDUuNjFsLTAuMDEsNC40M2gtMi42N3YtNC4zOGMtMC42OSwwLTEuNCwwLTIuMTMtMC4wMnY0LjRsLTIuNjgtMC4wMSAgIGwwLjAxLTQuNDRjLTAuNjMsMC01LjM5LTAuMDItNS4zOS0wLjAybDAuNTMtMy4xOWMwLDAsMS45OCwwLjAzLDEuOTQsMGMwLjc2LDAsMC45Ni0wLjU0LDEuMDEtMC44OUw5LjAyLDkuOTIgICBDOC45Miw5LjM4LDguNTYsOC43NSw3LjQ4LDguNzV6IE0yMS4xNSwxOS45M2MwLTMuNDYtNS42OC0yLjk1LTcuNDktMi45NWwtMC4wMSw1Ljg5QzE1LjQ3LDIyLjg3LDIxLjE1LDIzLjI1LDIxLjE1LDE5LjkzeiAgICBNMTMuNjYsMTQuMjljMS41MSwwLDYuMjUsMC4zNSw2LjI1LTIuNjZjMC0zLjE2LTQuNzQtMi42OC02LjI1LTIuNjhWMTQuMjl6IiBpZD0iWE1MSURfOTVfIi8+Cg08ZyBpZD0iWE1MSURfMTU3XyI+Cg08cGF0aCBjbGFzcz0ic3QxNyIgZD0iTTEzLjU5LDMxQzEzLjU5LDMxLDEzLjU5LDMxLDEzLjU5LDMxbC0yLjY4LTAuMDFjLTAuMjgsMC0wLjUtMC4yMy0wLjUtMC41bDAuMDEtMy45NCAgICBjLTEuNCwwLTQuODktMC4wMi00Ljg5LTAuMDJjLTAuMTUsMC0wLjI5LTAuMDctMC4zOC0wLjE4Yy0wLjA5LTAuMTEtMC4xMy0wLjI2LTAuMTEtMC40bDAuNTMtMy4xOWMwLjA0LTAuMjQsMC4yNS0wLjQyLDAuNDktMC40MiAgICBjMCwwLDAsMCwwLjAxLDBjMC43NywwLjAxLDEuNjMsMC4wMiwxLjg0LDAuMDFjMC4wMy0wLjAxLDAuMDYtMC4wMSwwLjEtMC4wMWMwLjI3LDAsMC40Ni0wLjA4LDAuNTEtMC40Nkw4LjUyLDkuOTIgICAgQzguNDMsOS40OSw4LjEsOS4yNSw3LjQ4LDkuMjVjLTAuMDQsMC0wLjA4LDAtMC4xMS0wLjAxYy0wLjIxLTAuMDEtMS4wNiwwLTEuODIsMC4wMUM1LjQxLDkuMjQsNS4yOSw5LjIsNS4xOSw5LjExICAgIFM1LjA0LDguODgsNS4wNCw4Ljc1VjUuODljMC0wLjEzLDAuMDUtMC4yNiwwLjE1LTAuMzVjMC4wOS0wLjA5LDAuMjUtMC4xNSwwLjM1LTAuMTVjMCwwLDMuNTEsMC4wMSw0Ljg5LDBsMC4wMS0zLjg5ICAgIGMwLTAuMjgsMC4yMi0wLjUsMC41LTAuNWgyLjY3YzAuMTMsMCwwLjI2LDAuMDUsMC4zNSwwLjE1YzAuMDksMC4wOSwwLjE1LDAuMjIsMC4xNSwwLjM1TDE0LjEsNS4zYzAuMzgtMC4wMSwwLjc2LTAuMDEsMS4xNC0wLjAyICAgIFYxLjVjMC0wLjEzLDAuMDUtMC4yNiwwLjE1LTAuMzVDMTUuNDgsMS4wNSwxNS42MSwxLDE1Ljc0LDFjMCwwLDAsMCwwLDBsMi42OCwwLjAxYzAuMjgsMCwwLjUsMC4yMywwLjUsMC41bC0wLjAxLDMuOTMgICAgYzEuOTMsMC4xOSw2LjEsMC44OSw2LjQ5LDQuOTRsMCwwYzAuMTgsMS45MS0wLjM2LDMuMzgtMS42Miw0LjM5YzIuNCwwLjkyLDMuNDMsMi44MSwzLjE1LDUuNzRjLTAuNDQsNC43NC00LjIzLDUuNzYtOC4wMyw2LjAzICAgIGwtMC4wMSwzLjk2YzAsMC4yOC0wLjIyLDAuNS0wLjUsMC41aC0yLjY3Yy0wLjI4LDAtMC41LTAuMjItMC41LTAuNXYtMy44OGMtMC4zNywwLTAuNzUsMC0xLjEzLTAuMDF2My44OSAgICBjMCwwLjEzLTAuMDUsMC4yNi0wLjE1LDAuMzVDMTMuODUsMzAuOTUsMTMuNzIsMzEsMTMuNTksMzF6IE0xNi4yMiwzMGgxLjY3bDAuMDEtMy45M2MwLTAuMjYsMC4yMS0wLjQ4LDAuNDctMC41ICAgIGM1LjEzLTAuMyw3LjI1LTEuNzQsNy41Ni01LjE2YzAuMjctMi44Mi0wLjgtNC4zNi0zLjQ1LTVjLTAuMi0wLjA1LTAuMzYtMC4yMi0wLjM4LTAuNDNjLTAuMDItMC4yMSwwLjA4LTAuNDEsMC4yNy0wLjUgICAgYzEuNTUtMC43OSwyLjIxLTIuMSwyLjAzLTQuMDFsMCwwQzI0LjE3LDgsMjIuMzEsNi43NCwxOC4zNyw2LjRjLTAuMjYtMC4wMi0wLjQ2LTAuMjQtMC40Ni0wLjVsMC4wMS0zLjg5TDE2LjI0LDJ2My43OCAgICBjMCwwLjI4LTAuMjIsMC41LTAuNSwwLjVjLTAuNywwLTEuNDEsMC4wMS0yLjEzLDAuMDNjLTAuMTQsMC0wLjI3LTAuMDUtMC4zNi0wLjE0UzEzLjEsNS45NCwxMy4xLDUuODFMMTMuMTEsMmgtMS42N2wtMC4wMSwzLjg5ICAgIGMwLDAuMjctMC4yMiwwLjQ5LTAuNDksMC41Yy0wLjQ2LDAuMDEtMy42NSwwLTQuOSwwdjEuODVjMC43OS0wLjAyLDEuMjItMC4wMiwxLjQ3LDAuMDFjMS4wOSwwLjAxLDEuODIsMC41OCwyLDEuNThsMCwxMi4xMiAgICBjLTAuMTIsMC45LTAuNjksMS4zOS0xLjUxLDEuMzl2LTAuMDFjLTAuMjcsMC4wMy0wLjczLDAuMDItMS41MiwwLjAxbC0wLjM2LDIuMTljMS4yOSwwLjAxLDQuMzEsMC4wMiw0LjgsMC4wMiAgICBjMC4xMywwLDAuMjYsMC4wNSwwLjM1LDAuMTVjMC4wOSwwLjA5LDAuMTUsMC4yMiwwLjE1LDAuMzVsLTAuMDEsMy45NEwxMy4wOSwzMHYtMy45YzAtMC4xMywwLjA1LTAuMjYsMC4xNS0wLjM2ICAgIGMwLjEtMC4wOSwwLjIyLTAuMTQsMC4zNi0wLjE0YzAuNzMsMC4wMiwxLjQzLDAuMDIsMi4xMiwwLjAyYzAuMjgsMCwwLjUsMC4yMiwwLjUsMC41VjMweiIgaWQ9IlhNTElEXzY3MF8iLz4KDTxwYXRoIGNsYXNzPSJzdDE3IiBkPSJNMTUuMDIsMjMuMzhjLTAuMzEsMC0wLjYsMC0wLjg1LTAuMDFsLTAuNTEtMC4wMWMtMC4xMywwLTAuMjYtMC4wNS0wLjM1LTAuMTUgICAgYy0wLjA5LTAuMDktMC4xNS0wLjIyLTAuMTUtMC4zNWwwLjAxLTMuOTVjMC0wLjI4LDAuMjItMC41LDAuNS0wLjVjMCwwLDAsMCwwLDBjMC4yOCwwLDAuNSwwLjIyLDAuNSwwLjVsLTAuMDEsMy40NmgwLjAzICAgIGMxLjUzLDAuMDIsNC43MSwwLjA3LDUuOTUtMS4xNmMwLjM1LTAuMzQsMC41Mi0wLjc3LDAuNTItMS4yOWMwLTAuNTYtMC4xOC0xLjAxLTAuNTQtMS4zN2MtMS4yMi0xLjItNC4yLTEuMTMtNS43OS0xLjA5ICAgIGMtMC4yNSwwLjAxLTAuNDcsMC4wMS0wLjY1LDAuMDFjLTAuMjgsMC0wLjUtMC4yMi0wLjUtMC41czAuMjItMC41LDAuNS0wLjVjMC4xOCwwLDAuMzksMCwwLjYzLTAuMDEgICAgYzEuODctMC4wNCw0Ljk5LTAuMTEsNi41MiwxLjM4YzAuNTYsMC41NSwwLjg1LDEuMjUsMC44NSwyLjA5YzAsMC43OS0wLjI3LDEuNDctMC44MiwyQzE5LjUxLDIzLjIzLDE2Ljg3LDIzLjM4LDE1LjAyLDIzLjM4eiIgaWQ9IlhNTElEXzY2OV8iLz4KDTxwYXRoIGNsYXNzPSJzdDE3IiBkPSJNMTQuODEsMTQuOGMtMC4yNiwwLTAuNTEsMC0wLjcyLTAuMDFsLTAuNDMsMGMtMC4yOCwwLTAuNS0wLjIyLTAuNS0wLjVWMTAuOSAgICBjMC0wLjI4LDAuMjItMC41LDAuNS0wLjVzMC41LDAuMjIsMC41LDAuNXYyLjljMS4yNSwwLjAyLDMuNzUsMC4wNSw0Ljc4LTAuOTdjMC4zMi0wLjMxLDAuNDctMC43MSwwLjQ3LTEuMiAgICBjMC0wLjU0LTAuMTYtMC45Ni0wLjUtMS4yOWMtMS4wMi0xLTMuNDEtMC45My00LjY5LTAuOWMtMC4yMiwwLjAxLTAuNCwwLjAxLTAuNTYsMC4wMWMtMC4yOCwwLTAuNS0wLjIyLTAuNS0wLjVzMC4yMi0wLjUsMC41LTAuNSAgICBjMC4xNSwwLDAuMzMsMCwwLjUzLTAuMDFjMS41My0wLjA0LDQuMDktMC4xMSw1LjQxLDEuMThjMC41MywwLjUyLDAuOCwxLjE5LDAuOCwyLjAxYzAsMC43Ny0wLjI2LDEuNDEtMC43NywxLjkxICAgIEMxOC40OSwxNC42NywxNi4zNCwxNC44LDE0LjgxLDE0Ljh6IiBpZD0iWE1MSURfNjY4XyIvPgoNPC9nPgoNPC9nPgoNPC9zdmc+";

    function setUp() public{
        deployer = new DeployEther();
        (ethereum,helperConfig) = deployer.run();
    }

    function testNameCorrect() public view{
        string memory actualName = "EtherNft";
        string memory expectedName = ethereum.name();
        assert(keccak256(abi.encodePacked(actualName)) == keccak256(abi.encodePacked(expectedName)));
    }

    function testCanMintAndHaveABalance() public {
        vm.prank(USER);
        ethereum.mintNft();

        assert(ethereum.balanceOf(USER) == 1);
    }
    
    function testTokenURI() public{
        vm.prank(USER);
        ethereum.mintNft();
        console.log(ethereum.tokenURI(0));
    }

    function testPriceFeedSetCorrectly() public {
        address retreivedPriceFeed = address(ethereum.getPriceFeed());
        // (address expectedPriceFeed) = helperConfig.activeNetworkConfig();
        address expectedPriceFeed = helperConfig.activeNetworkConfig();
        assertEq(retreivedPriceFeed, expectedPriceFeed);
    }

    function testCheckUpKeepReturnsFalseIfConditionNotMet() public view{
        (bool upkeepNeeded,) = ethereum.checkUpkeep("");
        assert(upkeepNeeded == false);
    }
}